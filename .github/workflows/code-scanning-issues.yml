name: Create issues from code scanning results

####
# This workflow gets the latest code scanning results from the current
# repository over the last 24 hours, and transfers results into issues
####

on:
  workflow_dispatch:
  schedule:
  - cron: "30 1 * * *"

jobs:
  issue-creation:

    runs-on: ubuntu-latest

    steps:
    
    - name: Get Repo Security Vulnerability Alerts
      uses: octokit/graphql-action@v2.x
      id: get_filtered_alerts
      with:
        query: |
          query release($owner:String!,$repo:String!) {
              repository(owner:$owner,name:$repo) {
                vulnerabilityAlerts(first:1) {
                  nodes {
                    id
                    createdAt
                    securityAdvisory {
                      description
                      ghsaId
                    }
                    securityVulnerability{
                      vulnerableVersionRange
                    }
                    vulnerableManifestFilename
                    vulnerableManifestPath
                    vulnerableRequirements
                  }
                }
              }
            }
        owner: ${{ github.repository_owner }}
        repo: ${{ github.event.repository.name }}
      env:
        GITHUB_TOKEN: ${{ secrets.ORG_ACCESS_TOKEN }}
    - run: "echo 'latest release: ${{ steps.get_filtered_alerts.outputs.data }}'"
  
    # - name: Loop and create issues
    #  run: |
    #    jq -r '.children.values[] | [ ]' "${{ steps.get_filtered_alerts.outputs.data }}"
    
    #for k in $( jq '.repository.vulnerabilityAlerts.nodes | keys | .[]'  <<< ${{ steps.get_filtered_alerts.outputs.data }} ); do
    #  echo "$i"
    #done
        
    
    # Create issues for each alert created in the past 24 hours
    #- name: Create issue from code scanning alerts
    #  uses: maxkomarychev/oction-create-issue@v0.7.1
    #  id: create_issues
    #  with:
    #    token: ${{ secrets.GITHUB_TOKEN }}
    #    title: ${{ steps.get_filtered_alerts.outputs.data.repository.vulnerabilityAlerts }}
    #    body: ${{ steps.get_filtered_alerts.outputs.data }}
  
  
    #- name: Checkout repository
    #  uses: actions/checkout@v2
    #  with:
    #    # We must fetch at least the immediate parents so that if this is
    #    # a pull request then we can checkout the head.
    #    fetch-depth: 2
    
    
    # Get all code scanning alerts
    #- name: Get code scanning alerts
    #  uses: octokit/request-action@v2.x
    #  id: get_repo_alerts
    #  with:
    #    route: GET /repos/:repository/code-scanning/alerts
    #    repository: ${{ github.repository }}
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      
    # - name: Print outputs
    #  run: |
    #    echo ${{ steps.get_filtered_alerts.outputs.data }}
    #    echo ${{ steps.create_issues.outputs.id }}
    #    echo ${{ steps.create_issues.outputs.number }}
        

    
    
   
